<?php

namespace AppBundle\Entity\Congres;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Responsability;

/**
 * ContributionRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContributionRepository extends EntityRepository
{
    protected $classname;

    public function getCNVotesCount($contrib)
    {
        $CNCount = $this->createQueryBuilder('contrib')
            ->select('COUNT(contrib)')
            ->innerJoin('contrib.votes', 'u')
            ->innerJoin('u.profile', 'adh')
            ->innerJoin('adh.responsabilities', 'ar')
            ->innerJoin('ar.responsability', 'r')
            ->where('contrib.id = :contrib')
            ->andWhere('r.name IN (:rname)')
            ->setParameter('contrib', $contrib->getId())
            ->setParameter('rname', array(Responsability::INSTANCE_CN, Responsability::INSTANCE_BN))
            ->getQuery()->getSingleScalarResult();

        return $CNCount;
    }

    public function getVotesCount($contrib)
    {
        $VoteCount = $this->createQueryBuilder('contrib')
            ->select('COUNT(contrib)')
            ->innerJoin('contrib.votes', 'u')
            ->where('contrib.id = :contrib')
            ->setParameter('contrib', $contrib->getId())
            ->getQuery()->getSingleScalarResult();

        return $VoteCount;
    }

    public function findByStatusWithVotes($status, $user)
    {
        $contribs = $this->getEntityManager()->createQuery('
SELECT contrib entity, author, profile, contrib.id id,
COUNT(av) adhvote, (
SELECT COUNT(contrib2)
FROM '.$this->classname.' contrib2
LEFT JOIN  contrib2.votes cnv
LEFT JOIN  cnv.profile adh
LEFT JOIN adh.responsabilities adhres
LEFT JOIN adhres.responsability res
WHERE contrib.id = contrib2.id AND res.name IN (:iname)
) cnvote,
(
SELECT COUNT(contrib3)
FROM '.$this->classname.' contrib3
LEFT JOIN  contrib3.votes uv
WHERE contrib.id = contrib3.id AND uv.id = :user
) uservote
FROM '.$this->classname.' contrib
LEFT JOIN contrib.votes av
LEFT JOIN contrib.author author
LEFT JOIN author.profile profile
WHERE contrib.status = :status
GROUP BY contrib.id')
            ->setParameter('user', $user->getId())
            ->setParameter('status', $status)
            ->setParameter('iname', array(Responsability::INSTANCE_CN, Responsability::INSTANCE_BN))
            ->execute();

        return $contribs;
    }

    public function getVotes($contrib, $user)
    {
        $contribs = $this->getEntityManager()->createQuery('
SELECT COUNT(av) adhvote, (
SELECT COUNT(contrib2)
FROM '.$this->classname.' contrib2
LEFT JOIN  contrib2.votes cnv
LEFT JOIN  cnv.profile adh
LEFT JOIN adh.responsabilities adhres
LEFT JOIN adhres.responsability res
WHERE contrib.id = contrib2.id AND res.name IN (:iname)
) cnvote,
(
SELECT COUNT(contrib3)
FROM '.$this->classname.' contrib3
LEFT JOIN  contrib3.votes uv
WHERE contrib.id = contrib3.id AND uv.id = :user
) uservote
FROM '.$this->classname.' contrib
LEFT JOIN contrib.votes av
WHERE contrib.id = :id')
            ->setParameter('user', $user->getId())
            ->setParameter('id', $contrib->getId())
            ->setParameter('iname', array(Responsability::INSTANCE_CN, Responsability::INSTANCE_BN))
            ->getSingleResult();

        return $contribs;
    }

    public function hasVoted($user)
    {
        $hasVoted = $this->createQueryBuilder('contrib')
            ->select('COUNT(contrib)')
            ->innerJoin('contrib.votes', 'u')
            ->where('u.id = :user')
            ->setParameter('user', $user->getId())
            ->getQuery()->getSingleScalarResult();

        return $hasVoted;
    }
}
