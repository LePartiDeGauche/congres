<?php

namespace AppBundle\Entity\Congres;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Instance;

/**
 * ThematicContributionsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ThematicContributionRepository extends EntityRepository
{
    public function getCNVotesCount($contrib)
    {
        $CNCount = $this->createQueryBuilder('tc')
            ->select('COUNT(tc)')
            ->innerJoin('tc.votes', 'u')
            ->innerJoin('u.profile', 'adh')
            ->innerJoin('adh.instances', 'i')
            ->where('tc.id = :contrib')
            ->andWhere('i.name = :iname')
            ->setParameter('contrib', $contrib->getId())
            ->setParameter('iname', Instance::INSTANCE_CN)
            ->getQuery()->getSingleScalarResult();

        return $CNCount;
    }

    public function getVotesCount($contrib)
    {
        $VoteCount = $this->createQueryBuilder('tc')
            ->select('COUNT(tc)')
            ->innerJoin('tc.votes', 'u')
            ->where('tc.id = :contrib')
            ->setParameter('contrib', $contrib->getId())
            ->getQuery()->getSingleScalarResult();

        return $VoteCount;
    }

    public function findByStatusWithVotes($status, $user)
    {
        $contribs =
            $this->getEntityManager()->createQuery('
SELECT tc.id id, tc.title title,
COUNT(av) adhvote, (
SELECT COUNT(tc2)
FROM  AppBundle\Entity\Congres\ThematicContribution tc2
LEFT JOIN  tc2.votes cnv
LEFT JOIN  cnv.profile adh
LEFT JOIN  adh.instances inst
WHERE tc.id = tc2.id AND inst.name = :iname
) cnvote,
(
SELECT COUNT(tc3)
FROM  AppBundle\Entity\Congres\ThematicContribution tc3
LEFT JOIN  tc3.votes uv
WHERE tc.id = tc3.id AND uv.id = :user
) uservote
FROM AppBundle\Entity\Congres\ThematicContribution tc
LEFT JOIN tc.votes av
WHERE tc.status = :status
GROUP BY id, title')
            ->setParameter('user', $user->getId())
            ->setParameter('status', $status)
            ->setParameter('iname', Instance::INSTANCE_CN)
            ->execute();

        return $contribs;
    }

    public function getVotes($contrib, $user)
    {
        $contribs =
            $this->getEntityManager()->createQuery('
SELECT COUNT(av) adhvote,
(
SELECT COUNT(tc2)
FROM  AppBundle\Entity\Congres\ThematicContribution tc2
LEFT JOIN  tc2.votes cnv
LEFT JOIN  cnv.profile adh
LEFT JOIN  adh.instances inst
WHERE tc.id = tc2.id AND inst.name = :iname
) cnvote,
(
SELECT COUNT(tc3)
FROM  AppBundle\Entity\Congres\ThematicContribution tc3
LEFT JOIN  tc3.votes uv
WHERE tc.id = tc3.id AND uv.id = :user
) uservote
FROM AppBundle\Entity\Congres\ThematicContribution tc
LEFT JOIN tc.votes av
WHERE tc.id = :id')
            ->setParameter('user', $user->getId())
            ->setParameter('id', $contrib->getId())
            ->setParameter('iname', Instance::INSTANCE_CN)
            ->getSingleResult();

        return $contribs;
    }

    public function hasAlreadyVoted($contrib, $user)
    {
        $hasAlreadyVoted = $this->createQueryBuilder('tc')
            ->select('COUNT(tc)')
            ->innerJoin('tc.votes', 'u')
            ->where('u.id = :user')
            ->andWhere('tc.id = :id')
            ->setParameter('user', $user->getId())
            ->setParameter('id', $contrib->getId())
            ->getQuery()->getSingleScalarResult();

        return $hasAlreadyVoted;
    }
}
